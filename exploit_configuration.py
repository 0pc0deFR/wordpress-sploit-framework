from read_configuration import *
from plugins_loader import *
from web_server_builder import *
from urllib import *

class ExploitConfiguration:
	"""
	Configure l'exploit avec le payload
	"""
	def __init__(self, exploit, payload, uri):
		"""
		Recupere les informations utiles
		"""
		pluginsloader = PluginsLoader('./plugins')
		self.list_plugins = pluginsloader.load_plugins('')
		self.BaseConf = BaseConfiguration(exploit, True)
		self.ExploitationConf = ExploitationConfiguration(exploit)
		self.PayloadConf = PayloadConfiguration(payload, True, self.list_plugins)
		self.url = self.ExploitationConf.read_url()
		self.params = self.ExploitationConf.read_parameters()
		self.uri = uri
		self.construct_url()
		self.compile_exploit_payload()
		Exploit(self.url, self.params, self.ExploitationConf.read_method())

	def compile_exploit_payload(self):
		if(self.BaseConf.read_type().lower() == "csrf"):
			if(self.PayloadConf.read_type().lower() == "csrf"):
				if(self.ExploitationConf.read_method().lower() == self.PayloadConf.read_method().lower()):
					Plugin = PluginLoader(self.list_plugins)
					web_server = WebServer(8080,self.url, self.params, self.PayloadConf.read_method().lower(), Plugin.load_func_payload(self.PayloadConf.read_payload(), self.ExploitationConf.read_method(), self.BaseConf.read_type()))
				else:
					print "The exploit and payload must use the same HTTP method!"
			else:
				print "The payload must be a CSRF type!"
				exit()
		else:
			for key, value in self.params.items():
				if(value == "[PAYLOAD]"):
					Plugin = PluginLoader(self.list_plugins)
					self.params[key] = Plugin.load_func_payload(self.PayloadConf.read_payload(), self.ExploitationConf.read_method(), self.BaseConf.read_type())
		return self.params

	def construct_url(self):
		if(self.uri[len(self.uri)-1:] != '/' and self.url[0:1] != '/'):
			self.url = self.uri+'/'+self.url
		elif(self.uri[len(self.uri)-1:] == '/' and self.url[0:1] != '/' or self.uri[len(self.uri)-1:] != '/' and self.url[0:1] == '/'):
			self.url = self.uri+self.url
		else:
			self.url = self.uri[:-1]+self.url
		return self.url



class Exploit:
	"""
	Lance l'exploitation
	"""
	def __init__(self, url, params, method):
		self.params = urlencode(params)
		try:
			if(method == "get"):
				urlopen(url+"?%s" % self.params)
			elif(method == "post"):
				urlopen(url, self.params)
		except:
			print '[-] The connection could not be established!'
